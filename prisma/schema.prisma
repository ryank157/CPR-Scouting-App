// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource mysql {
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_URL")
  provider          = "mysql"
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Robot {
  id        Int         @id @unique
  name      String
  events    Event[]
  match     Match[]
  alliances Alliances[]
}

model Event {
  id        String      @id @default(cuid())
  name      String
  robots    Robot[]
  matches   Match[]
  alliances Alliances[]
}

model Match {
  id             String       @id @default(cuid()) //Need to figure out how to get this to work
  flag           String //Type of match: normal, replay, practice, etc.
  event          Event        @relation(fields: [eventId], references: [id])
  eventId        String
  robot          Robot[]
  robotMatchData robotMatch[]

  @@index([eventId])
}

model robotMatch {
  id             String @id @default(cuid())
  match          Match  @relation(fields: [matchId], references: [id])
  matchId        String
  teleMadeHigh   Int
  teleMissedHigh Int

  @@index([matchId])
}

model Alliances {
  id               String  @id @default(cuid())
  event            Event   @relation(fields: [eventId], references: [id])
  eventId          String
  robots           Robot[]
  alliancePosition Int

  @@index([eventId])
}
