// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource mysql {
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_URL")
  provider          = "mysql"
  relationMode      = "prisma"
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier Int
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Robot {
  id         Int          @id @unique @default(autoincrement())
  name       String
  teamNumber Int          @unique
  city       String
  events     Event[]
  alliances  Alliances[]
  robotMatch RobotMatch[]
}

model Event {
  id        Int         @id @default(autoincrement())
  name      String
  key       String
  robots    Robot[]
  matches   Match[]
  alliances Alliances[]
}

model Match {
  id             Int          @id @default(autoincrement()) //Need to figure out how to get this to work
  flag           String //Type of match: normal, replay, practice, etc.
  event          Event        @relation(fields: [eventId], references: [id])
  eventId        Int
  matchNumber    Int
  robotMatchData RobotMatch[]

  @@unique([matchNumber, eventId, flag])
  @@index([eventId])
}

model RobotMatch {
  id         Int    @id @default(autoincrement())
  match      Match  @relation(fields: [matchId], references: [id])
  matchId    Int
  robot      Robot  @relation(fields: [teamNumber], references: [teamNumber])
  teamNumber Int
  station    Int
  alliance   String

  startingLoc    Int?
  mobility       String?
  autoBalance    String?
  fouls          String?
  defense        String?
  scoredPieces   ScoredPiece[]
  endingLoc      Int?
  endBalanceTime Int?
  endRobots      Int?
  endOrder       Int?
  endResult      String?
  feedback       String?

  scouter   Scouter? @relation(fields: [scouterId], references: [id])
  scouterId Int?

  @@unique([matchId, teamNumber])
  @@index([matchId])
  @@index([teamNumber])
  @@index([scouterId])
}

model ScoredPiece {
  id           Int        @id @default(autoincrement())
  robotMatch   RobotMatch @relation(fields: [robotMatchId], references: [id])
  robotMatchId Int

  type              String?
  scoredLocation    Int?
  cycleTime         Int?
  pickupLocation    String?
  pickupOrientation String?
  delayed           String?

  @@index([robotMatchId])
}

model Alliances {
  id               Int     @id @default(autoincrement())
  event            Event   @relation(fields: [eventId], references: [id])
  eventId          Int
  robots           Robot[]
  alliancePosition Int

  @@index([eventId])
}

model Scouter {
  id         Int          @id @default(autoincrement())
  name       String
  scouterId  String       @unique
  robotMatch RobotMatch[]
}
